== CClib ==
cclib method [evalcode] [JSON params]
cclibaddress [evalcode] [pubkey]
cclibinfo

== FSM ==
FSMaddress [pubkey]
FSMcreate name states
FSMinfo fundingtxid
FSMlist

== Addressindex ==
checknotarization
getaddressbalance
getaddressdeltas
getaddressmempool
getaddresstxids (ccvout)
getaddressutxos
getnotarypayinfo
getsnapshot

== Auction ==
auctionaddress [pubkey]

== Blockchain ==
coinsupply <height>
getbestblockhash
getblock "hash|height" ( verbosity )
getblockchaininfo
getblockcount

getblockhash index
getblockhashes timestamp
getblockheader "hash" ( verbose )
getchaintips
getchaintxstats
getdifficulty
getlastsegidstakes depth
getmempoolinfo
getrawmempool ( verbose )
getspentinfo
gettxout "txid" n ( includemempool )
gettxoutproof ["txid",...] ( blockhash )
gettxoutsetinfo
kvsearch key
kvupdate key "value" days passphrase
minerids needs height
notaries height timestamp
verifychain ( checklevel numblocks )
verifytxoutproof "proof"
z_gettreestate "hash|height"

== Channels ==
channelsaddress pubkey
channelsclose opentxid
channelsinfo [opentxid]
channelslist
channelsopen destpubkey numpayments payment [tokenid]
channelspayment opentxid amount [secret]
channelsrefund opentxid closetxid

== Control ==
geterablockheights
getiguanajson
getinfo
getnotarysendmany
help ( "command" )
stop

== Crosschain ==
MoMoMdata symbol kmdheight ccid
assetchainproof needs a txid
calc_MoM height MoMdepth
getNotarisationsForBlock height
getimports "hash|height"
getwalletburntransactions "count"
height_MoM height
importdual only works on -ac_import chains
importgatewaybind only works on -ac_import chains
importgatewaycompletesigning only works on -ac_import chains
importgatewayddress [pubkey]
importgatewaydeposit only works on -ac_import chains
importgatewaybind only works on -ac_import chains
importgatewaymarkdone completesigningtx coin
importgatewayspartialsign only works on -ac_import chains
importgatewaypendingwithdraws bindtxid coin
importgatewayprocessed bindtxid coin
importgatewaywithdraw only works on -ac_import chains
migrate_checkburntransactionsource burntxid
migrate_completeimporttransaction importTx [offset]
migrate_converttoexport rawTx dest_symbol
migrate_createburntransaction dest_symbol dest_addr amount [tokenid]
migrate_createimporttransaction burnTx payouts [notarytxid-1]..[notarytxid-N]
migrate_createnotaryapprovaltransaction burntxid txoutproof
scanNotarisationsDB blockHeight symbol [blocksLimit=1440]
selfimport only works on -ac_import chains

== Dice ==
diceaddfunds name fundingtxid amount
diceaddress [pubkey]
dicebet name fundingtxid amount odds
dicefinish name fundingtxid bettxid
dicefund name funds minbet maxbet maxodds timeoutblocks
diceinfo fundingtxid
dicelist
dicestatus name fundingtxid bettxid

== Disclosure ==
z_getpaymentdisclosure "txid" "js_index" "output_index" ("message") 
z_validatepaymentdisclosure "paymentdisclosure"

== Faucet ==
faucetaddress [pubkey]
faucetfund amount
faucetget
faucetinfo

== Gateways ==
gatewaysaddress [pubkey]
gatewaysbind tokenid oracletxid coin tokensupply M N pubkey(s) pubtype p2shtype wiftype [taddr]
gatewaysclaim bindtxid coin deposittxid destpub amount
gatewayscompletesigning withdrawtxid coin hex
gatewaysdeposit bindtxid height coin cointxid claimvout deposithex proof destpub amount
gatewaysdumpprivkey bindtxid address
gatewaysexternaladdress bindtxid pubkey
gatewaysinfo bindtxid
gatewayslist
gatewaysmarkdone completesigningtx coin
gatewayspartialsign txidaddr refcoin hex
gatewayspendingdeposits bindtxid coin
gatewayspendingwithdraws bindtxid coin
gatewaysprocessed bindtxid coin
gatewayswithdraw bindtxid coin withdrawpub amount

== Generating ==
generate numblocks
getgenerate
setgenerate generate ( genproclimit )

== Heir ==
heiradd funds fundingtxid
heiraddress pubkey
heirclaim funds fundingtxid
heirfund funds heirname heirpubkey inactivitytime memo [tokenid]
heirinfo fundingtxid
heirlist

== Lotto ==
lottoaddress [pubkey]

== Mining ==
genminingCSV
getblocksubsidy height
getblocktemplate ( "jsonrequestobject" )
getlocalsolps
getmininginfo
getnetworkhashps ( blocks height )
getnetworksolps ( blocks height )
prioritisetransaction <txid> <priority delta> <fee delta>
submitblock "hexdata" ( "jsonparametersobject" )

== NSPV ==
nspv_broadcast hex
nspv_getinfo [hdrheight]
nspv_hdrsproof prevheight nextheight
nspv_listccmoduleunspent address amount evalcode funcids txid
nspv_listtransactions [address [isCC [skipcount]]]
nspv_listunspent [address [isCC [skipcount]]]
nspv_login wif
nspv_logout
nspv_mempool func(0 all, 1 address recv, 2 txid/vout spent, 3 txid inmempool) address isCC [txid vout]]]
nspv_notarizations height
nspv_spend address amount
nspv_spentinfo txid vout
nspv_txproof txid height

== Network ==
addnode "node" "add|remove|onetry"
clearbanned
disconnectnode "node" 
getaddednodeinfo dns ( "node" )
getconnectioncount
getdeprecationinfo
getnettotals
getnetworkinfo
getpeerinfo
listbanned
ping
setban "ip(/netmask)" "add|remove" (bantime) (absolute)

== Oracles ==
oraclesaddress [pubkey]
oraclescreate name description format
oraclesdata oracletxid hexstr
oraclesfund oracletxid
oraclesinfo oracletxid
oracleslist
oraclesregister oracletxid datafee
oraclessample oracletxid txid
oraclessamples oracletxid batonaddress num
oraclessubscribe oracletxid publisher amount

== Payments ==
paymentsaddress [pubkey]
paymentsairdrop "[lockedblocks,minamount,mintoaddress,top,bottom,fixedFlag,%22excludeAddress%22,...,%22excludeAddressN%22]"
payments_airdroptokens "[%22tokenid%22,lockedblocks,minamount,mintoaddress,top,bottom,fixedFlag,%22excludePubKey%22,...,%22excludePubKeyN%22]"
paymentscreate "[lockedblocks,minamount,%22paytxid0%22,...,%22paytxidN%22]"
paymentsfund "[%22createtxid%22,amount(,useopret)]"
paymentsinfo "[%22createtxid%22]"
paymentslist
paymentsmerge "[%22createtxid%22]"
paymentsrelease "[%22createtxid%22,amount,(skipminimum)]"
paymentstxidopret "[allocation,%22scriptPubKey%22(,%22destopret%22)]"

== Rawtransactions ==
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...} ( locktime ) ( expiryheight )
decoderawtransaction "hexstring"
decodescript "hex"
fundrawtransaction "hexstring"
getrawtransaction "txid" ( verbose )
sendrawtransaction "hexstring" ( allowhighfees )
signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )

== Rewards ==
rewardsaddfunding name fundingtxid amount
rewardsaddress [pubkey]
rewardscreatefunding name amount APR mindays maxdays mindeposit
rewardsinfo fundingtxid
rewardslist
rewardslock name fundingtxid amount
rewardsunlock name fundingtxid [txid]

== Tokens ==
assetsaddress [pubkey]
mytokenorders [evalcode]
tokenaddress [pubkey]
tokenask numtokens tokenid price
tokenbalance tokenid [pubkey]
tokenbid numtokens tokenid price
tokencancelask tokenid asktxid
tokencancelbid tokenid bidtxid
tokenconvert evalcode tokenid pubkey amount
u
tokenfillask tokenid asktxid fillunits
tokenfillbid tokenid bidtxid fillamount
tokeninfo tokenid
tokenlist
tokenorders [tokenid]
tokentransfer tokenid destpubkey amount

== Util ==
createmultisig nrequired ["key",...]
decodeccopret scriptPubKey
estimatefee nblocks
estimatepriority nblocks
invalidateblock "hash"
reconsiderblock "hash"
txnotarizedconfirmed txid
validateaddress "komodoaddress"
verifymessage "komodoaddress" "signature" "message"
z_validateaddress "zaddr"

== Wallet ==
addmultisigaddress nrequired ["key",...] ( "account" )
backupwallet "destination"
cleanwallettransactions "txid"
convertpassphrase "agamapassphrase"
dumpprivkey "t-addr"
dumpwallet "filename"
encryptwallet "passphrase"
getaccount "NexaCore_address"
getaccountaddress "account"
getaddressesbyaccount "account"
getbalance ( "account" minconf includeWatchonly )
getnewaddress ( "account" )
getrawchangeaddress
getreceivedbyaccount "account" ( minconf )
getreceivedbyaddress "NexaCore_address" ( minconf )
gettransaction "txid" ( includeWatchonly )
getunconfirmedbalance
getwalletinfo
importaddress "address" ( "label" rescan )
importprivkey "komodoprivkey" ( "label" rescan height secret_key)
importwallet "filename"
keypoolrefill ( newsize )
listaccounts ( minconf includeWatchonly)
listaddressgroupings
listlockunspent
listreceivedbyaccount ( minconf includeempty includeWatchonly)
listreceivedbyaddress ( minconf includeempty includeWatchonly)
listsinceblock ( "blockhash" target-confirmations includeWatchonly)
listtransactions ( "account" count from includeWatchonly)
listunspent ( minconf maxconf  ["address",...] )
lockunspent unlock [{"txid":"txid","vout":n},...]
move "fromaccount" "toaccount" amount ( minconf "comment" )
opreturn_burn burn_amount hexstring ( txfee )
resendwallettransactions
sendfrom "fromaccount" "toNexaCoreaddress" amount ( minconf "comment" "comment-to" )
sendmany "fromaccount" {"address":amount,...} ( minconf "comment" ["address",...] )
sendtoaddress "NexaCore_address" amount ( "comment" "comment-to" subtractfeefromamount )
setaccount "NexaCore_address" "account"
setpubkey
setstakingsplit
settxfee amount
signmessage "t-addr" "message"
z_exportkey "zaddr"
z_exportviewingkey "zaddr"
z_exportwallet "filename"
z_getbalance "address" ( minconf )
z_getnewaddress ( type )
z_getoperationresult (["operationid", ... ]) 
z_getoperationstatus (["operationid", ... ]) 
z_gettotalbalance ( minconf includeWatchonly )
z_importkey "zkey" ( rescan startHeight )
z_importviewingkey "vkey" ( rescan startHeight )
z_importwallet "filename"
z_listaddresses ( includeWatchonly )
z_listoperationids
z_listreceivedbyaddress "address" ( minconf )
z_listunspent ( minconf maxconf includeWatchonly ["zaddr",...] )
z_mergetoaddress ["fromaddress", ... ] "toaddress" ( fee ) ( transparent_limit ) ( shielded_limit ) ( memo )
z_sendmany "fromaddress" [{"address":... ,"amount":...},...] ( minconf ) ( fee )
z_shieldcoinbase "fromaddress" "tozaddress" ( fee ) ( limit )
z_viewtransaction "txid"
zcbenchmark benchmarktype samplecount
zcrawjoinsplit rawtx inputs outputs vpub_old vpub_new
zcrawkeygen
zcrawreceive zcsecretkey encryptednote
zcsamplejoinsplit
#iguana documentation shows how to get the btcpubkey and wifstrs that need to be used
#bitcoin also need to be installed with txindex=1 and with rpc enabled
cd ~
cd komodo
#This will return your pubkey eg. "0259e137e5594cf8287195d13aed816af75bd5c04ae673296b51f66e7e8346e8d8" for your address
./src/komodo-cli validateaddress <yourwalletaddres>
#This will give the privkey of your wallet address
./src/komodo-cli dumpprivkey <yourwalletaddres>
#This will import the privkey to be sure the mined coins are placed into your wallet address
./src/komodo-cli importprivkey <yourwalletprivkey>
#To stop the daemon:
./src/komodo-cli stop
#This starts komodo notary - replace genproclimit with number of threads you want to use and add your pubkey
./src/komodod -gen -genproclimit=2 -notary -pubkey="0259e137e5594cf8287195d13aed816af75bd5c04ae673296b51f66e7e8346e8d8" &
#This will get the stats:
./src/komodo-cli getinfo
#To view the process:
ps -ef | grep komodod
#To stop the daemon:
./src/komodo-cli stop
tail -f ~/.komodo/NexaCore/debug.log
#To view komodod output:
tail -f ~/.komodo/NexaCore/debug.log
#To view all command
./src/komodo-cli help
ASSETCHAINS: -ac_name=name -ac_supply=nnnnn
Both komodod and komodo-cli recognize -ac_name=option so you can create fork from the commandline